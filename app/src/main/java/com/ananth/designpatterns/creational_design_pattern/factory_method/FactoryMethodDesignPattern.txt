Factory Method Design Pattern

->We want to move the object creation logic from our code to separate class
->We use this pattern when we do not know in advance which class we may need to
instantiate beforehead and also allow new classes to be added to system and handle
their creation without affecting client code.
->We let subclasses decide which object to instantiate by overriding the factory method.

Implement a Factory Method

->We start by creating a class for our creator

  ->Creator itself can be concrete if it can provide a default object or it can be abstract.
  ->Implementations will override the method and return an object.

Implementation consideration

-1. Creator can be a concrete class & provide default implementation for Factory method. in
such cases you will create some default object in the base creator.

-2. you can also use the simple factory way of accepting additional arguments
to choose between different object types, Subclasses can override factory method
to selectively create different objects for some criteria.

Design Consideration

-> Creator hierarchy in factory method pattern reflects the product hierarchy.
we typically end up with a concrete creator per object type.

->Template method design pattern often makes use of factory methods.

->Another creational design pattern called "Abstract Factory" makes uses of factory method pattern.


REAL WORLD EXAMPLES

1. The java.util.Collection (or java.util.AbstractCollection) has an abstract method called iterator().
this method is an example of Factory Method.

PitFalls

1. More complex to implement, More classes involved and need unit testing.
2. We have to start factory method design pattern from the beginning. Its not
easy to refactor existing code into factor method pattern.
3. Sometimes this pattern forces you to subclass just to create appropriate instance.